#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5.820595439144949, 0.8545093266178355, 0.7705131901642522)
                double radius = -0.07744753360748291
                double3 target = (0, 0.8545093266178369, 0.7705131901642509)
            }
            dictionary Perspective = {
                double3 position = (-1.963362130817697, -0.9891653748146719, 2.056411854549315)
                double3 target = (700.6915156222996, 323.4229300776997, -303.12714458089636)
            }
            dictionary Right = {
                double3 position = (0.8094890765510456, -5.7449969645579895, 0.11978638545415769)
                double radius = 1.8976449966430664
            }
            dictionary Top = {
                double3 position = (-0.11228070175438504, 0.014035087719298933, 8.659447449615314)
                double radius = 10.532022094726562
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary metricsAssembler = {
            dictionary "/World/rubiks_cube" = {
            }
            int version = 1
        }
        dictionary omni_layer = {
            string authoring_layer = "./TestSim3.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:directLighting:sampledLighting:samplesPerPixel" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            int "rtx:post:dlss:execMode" = 0
            bool "rtx:post:histogram:enabled" = 1
            double "rtx:post:histogram:whiteScale" = 1.3000000193715096
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            double "rtx:post:lensFlares:flareScale" = 0.075
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            double "rtx:post:tonemap:filmIso" = 308
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            bool "rtx:reflections:enabled" = 0
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
            bool "rtx:translucency:enabled" = 0
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def RectLight "RectLight" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 15000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (0.7071067811865476, 0, 0, 0.7071067811865475)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-6.978747907717288, -10.004167971307723, 2.9464435763920998)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_01" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 15000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-7.502017571454682, -0.0660733874402392, 2.831895885867053)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_02" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 15000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-1.9897936531491918, 0.011376306900711328, 2.9701938324595427)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_03" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 15000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.5041922198686093, -3.4925882485977784, 2.9852558444318245)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_04" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 15000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.5033036000797664, 4.499070462363246, 2.9995267391204834)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "alfred_parent_prim"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4000000059604645, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "alfred_base_descr" (
            prepend references = @/home/ros/dev_ws/src/thesis_ros_ws/dim_cpp/urdf/alfred_base_descr/alfred_base_descr.usd@
        )
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.3114, 0.2762, 0.005)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "alfred_base_link"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                point3f physics:centerOfMass = (0.225, 0.15, 0.9125)
                vector3f physics:velocity = (-0.0016032209, 0.0007115479, -0.0004220607)
                quatd xformOp:orient = (0.7066442280862204, 0.00007417495361581432, -0.0015752733450378467, 0.7075672744865992)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.31097290208047035, -0.275324027454698, 0.1217045783996582)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "left_wheel_joint"
                {
                    float drive:angular:physics:damping = 50
                    float drive:angular:physics:maxForce = 25
                    float drive:angular:physics:stiffness = 0
                    float physxJoint:maxJointVelocity = 180
                    float state:angular:physics:position = 38.430344
                    float state:angular:physics:velocity = -0.759999
                }

                over "right_wheel_joint"
                {
                    float drive:angular:physics:damping = 50
                    float drive:angular:physics:maxForce = 25
                    float drive:angular:physics:stiffness = 0
                    float physxJoint:maxJointVelocity = 180
                    float state:angular:physics:position = -0.64367217
                    float state:angular:physics:velocity = -3.822752
                }

                over "pillar_platform_joint"
                {
                    float drive:linear:physics:damping = 1000
                    float drive:linear:physics:maxForce = 1000
                    float drive:linear:physics:stiffness = 100000
                    float drive:linear:physics:targetPosition = -0.3
                    float physxJoint:maxJointVelocity = 0.2
                    float state:linear:physics:position = -0.302415
                    float state:linear:physics:velocity = 0.067007385
                }

                over "pan_joint"
                {
                    float drive:angular:physics:damping = 1
                    float drive:angular:physics:maxForce = 2.5
                    float drive:angular:physics:stiffness = 20
                    float physxJoint:maxJointVelocity = 90
                    float state:angular:physics:position = -0.011438995
                    float state:angular:physics:velocity = 0.26252872
                }
            }

            over "tilt_base"
            {
                vector3f physics:angularVelocity = (-0.0013911619, -0.048772167, 0.18145454)
                vector3f physics:velocity = (-0.0022901017, -0.000019306979, 0.000004961525)
                quatd xformOp:orient = (0.7067148850525612, 0.00007443130015727945, -0.0015752762554808353, 0.7074967026141152)
                double3 xformOp:translate = (0.05024197409445641, -0.053688849723183996, 1.767996907234192)

                over "tilt_joint"
                {
                    float drive:angular:physics:damping = 1
                    float drive:angular:physics:maxForce = 2.5
                    float drive:angular:physics:stiffness = 20
                    float drive:angular:physics:targetPosition = 45
                    float physxJoint:maxJointVelocity = 90
                    float state:angular:physics:position = 57.339188
                    float state:angular:physics:velocity = -0.6784173
                }
            }

            over "L_link_base"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.001639664, -0.000105532374, 0.06697636)
                quatd xformOp:orient = (0.707930496263679, -0.7062810062773109, -0.0012120370519268018, -0.0002891331095938656)
                double3 xformOp:translate = (0.0058899791031539195, 0.049250159943258875, 1.2332254648208618)

                over "L_joint1"
                {
                    float drive:angular:physics:damping = 10
                    float drive:angular:physics:maxForce = 250
                    float drive:angular:physics:stiffness = 250
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = -42.56453
                    float state:angular:physics:velocity = -0.64483595
                }
            }

            over "L_link1"
            {
                vector3f physics:angularVelocity = (0.000008744655, -0.69299304, -0.0825761)
                vector3f physics:velocity = (-0.0011478637, -0.00013428887, 0.067217745)
                quatd xformOp:orient = (0.6595472889519037, -0.6576753306911579, -0.257482977608664, -0.2572217900533438)
                double3 xformOp:translate = (0.005540874698704457, 0.31624922581926596, 1.233847975730896)

                over "L_joint2"
                {
                    float drive:angular:physics:damping = 10
                    float drive:angular:physics:maxForce = 250
                    float drive:angular:physics:stiffness = 250
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 38.898834
                    float state:angular:physics:velocity = -0.039780565
                }
            }

            over "L_link2"
            {
                vector3f physics:angularVelocity = (-0.026961701, -0.69309634, -0.05333439)
                vector3f physics:velocity = (-0.0023631586, -0.00020228478, 0.06872668)
                quatd xformOp:orient = (-0.12243294715466094, 0.8783278290603591, -0.3099643824448702, 0.3427425852804274)
                double3 xformOp:translate = (0.005540874698704457, 0.31624922581926596, 1.2338478565216064)

                over "L_joint3"
                {
                    float drive:angular:physics:damping = 5
                    float drive:angular:physics:maxForce = 150
                    float drive:angular:physics:stiffness = 100
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = -51.441875
                    float state:angular:physics:velocity = -0.6834909
                }
            }

            over "L_link3"
            {
                vector3f physics:angularVelocity = (-0.49035493, -0.69487107, 0.44908282)
                vector3f physics:velocity = (-0.0029326605, 0.0008902522, 0.07060963)
                quatd xformOp:orient = (0.03844417417485423, 0.9258227178493474, 0.10193121813686291, 0.3619176250960935)
                double3 xformOp:translate = (0.16722449372107384, 0.5039308411718966, 1.3836361169815063)

                over "L_joint4"
                {
                    float drive:angular:physics:damping = 5
                    float drive:angular:physics:maxForce = 150
                    float drive:angular:physics:stiffness = 100
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = -0.005811062
                    float state:angular:physics:velocity = -0.06479201
                }
            }

            over "L_link4"
            {
                vector3f physics:angularVelocity = (-0.50078064, -0.63161695, 0.43969002)
                vector3f physics:velocity = (-0.0020424633, 0.0015092957, 0.072530515)
                quatd xformOp:orient = (0.6818573027344436, 0.6274795536857043, -0.18380700065348538, 0.32795581245781974)
                double3 xformOp:translate = (0.2779242665558517, 0.18634441920534384, 1.484615683555603)

                over "L_joint5"
                {
                    float drive:angular:physics:damping = 2.5
                    float drive:angular:physics:maxForce = 100
                    float drive:angular:physics:stiffness = 75
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 12.702455
                    float state:angular:physics:velocity = -0.1427652
                }
            }

            over "L_link5"
            {
                vector3f physics:angularVelocity = (-0.5975623, -0.6319845, 0.54464275)
                vector3f physics:velocity = (-0.0019271697, 0.0024564194, 0.07377798)
                quatd xformOp:orient = (-0.001817926997029737, 0.9314343730393108, -0.0011154562710491327, 0.36390309097286755)
                double3 xformOp:translate = (0.2779243857651412, 0.18634441920534384, 1.484615683555603)

                over "L_joint6"
                {
                    float drive:angular:physics:damping = 2.5
                    float drive:angular:physics:maxForce = 100
                    float drive:angular:physics:stiffness = 75
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = -42.658714
                    float state:angular:physics:velocity = 0.05293253
                }
            }

            over "L_gripper_base"
            {
                vector3f physics:angularVelocity = (-0.59760237, -0.68491656, 0.54442066)
                vector3f physics:velocity = (-0.0009253701, 0.0026075935, 0.07505253)
                quatd xformOp:orient = (-0.49906947210545227, -0.5007881742035899, 0.5013072114730809, -0.49883057876928905)
                double3 xformOp:translate = (0.3336844117432296, 0.039087299788153285, 1.535519003868103)

                over "L_jaw_1_joint"
                {
                    float drive:linear:physics:damping = 10
                    float drive:linear:physics:maxForce = 50
                    float drive:linear:physics:stiffness = 100
                    float drive:linear:physics:targetPosition = 0
                    float state:linear:physics:position = 0.0000141817245
                    float state:linear:physics:velocity = -0.000117429474
                }

                over "L_jaw_2_joint"
                {
                    float state:linear:physics:position = 0.00002713619
                    float state:linear:physics:velocity = -0.00006580161
                }
            }

            over "R_link_base"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0021342863, -0.00007632308, 0.0669641)
                quatd xformOp:orient = (0.7062809972545694, 0.707930505404412, -0.00028903037314900515, 0.0012119803579864622)
                double3 xformOp:translate = (0.006156113842076039, -0.1542491274236082, 1.2327508926391602)

                over "R_joint1"
                {
                    float drive:angular:physics:maxForce = 250
                    float drive:angular:physics:stiffness = 250
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = -0.7662523
                    float state:angular:physics:velocity = 3.2415984
                }
            }

            over "R_link1"
            {
                vector3f physics:angularVelocity = (0.003405421, -3.2897458, -0.088630885)
                vector3f physics:velocity = (-0.004083781, -0.00010849016, 0.066992246)
                quatd xformOp:orient = (0.7062732461015951, 0.7079166770547215, 0.004444682039675729, -0.0035106965809141273)
                double3 xformOp:translate = (0.006505277851170277, -0.4212481783984541, 1.232128381729126)

                over "R_joint2"
                {
                    float drive:angular:physics:maxForce = 250
                    float drive:angular:physics:stiffness = 250
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 0.005711793
                    float state:angular:physics:velocity = -0.06405397
                }
            }

            over "R_link2"
            {
                vector3f physics:angularVelocity = (0.0026846682, -3.2895975, -0.15268062)
                vector3f physics:velocity = (-0.0037545455, -0.000108977896, 0.06701336)
                quatd xformOp:orient = (0.9999832524019477, 0.0011605746789292433, 0.005625253871168094, 0.0007102822833297682)
                double3 xformOp:translate = (0.006505277851170277, -0.42124819329961527, 1.232128381729126)

                over "R_joint3"
                {
                    float drive:angular:physics:maxForce = 150
                    float drive:angular:physics:stiffness = 100
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = -0.10907212
                    float state:angular:physics:velocity = 0.028664684
                }
            }

            over "R_link3"
            {
                vector3f physics:angularVelocity = (0.0027250184, -3.318262, -0.1527475)
                vector3f physics:velocity = (-0.0016931407, -0.00022978743, 0.06967467)
                quatd xformOp:orient = (0.7062693951427841, 0.7079122662683028, 0.0051537323744115255, -0.004147745668969403)
                double3 xformOp:translate = (0.006917682388371205, -0.714247133052194, 1.2314459085464478)

                over "R_joint4"
                {
                    float drive:angular:physics:maxForce = 150
                    float drive:angular:physics:stiffness = 100
                    float drive:angular:physics:targetPosition = 0
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 0.0029233585
                    float state:angular:physics:velocity = 0.104545735
                }
            }

            over "R_link4"
            {
                vector3f physics:angularVelocity = (0.0013496771, -3.3180199, -0.2572839)
                vector3f physics:velocity = (-0.0018813077, -0.0005622769, 0.07410044)
                quatd xformOp:orient = (-0.0011633587633283907, 0.9999774589046706, 0.0006858445631696376, -0.006577073527096589)
                double3 xformOp:translate = (0.059413102367466664, -0.7141716139672636, 1.23075532913208)

                over "R_joint5"
                {
                    float drive:angular:physics:maxForce = 150
                    float drive:angular:physics:stiffness = 100
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 0.06048252
                    float state:angular:physics:velocity = -0.27284423
                }
            }

            over "R_link5"
            {
                vector3f physics:angularVelocity = (0.0017197089, -3.5908632, -0.25792208)
                vector3f physics:velocity = (-0.0006915484, -0.0005906722, 0.07447129)
                quatd xformOp:orient = (0.7079119013140658, -0.7062646746040402, 0.004538422450040875, 0.005509274545592824)
                double3 xformOp:translate = (0.1364417941361129, -0.37156538239701975, 1.2305359840393066)

                over "R_joint6"
                {
                    float drive:angular:physics:damping = 2.5
                    float drive:angular:physics:maxForce = 100
                    float drive:angular:physics:stiffness = 75
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 0.003184708
                    float state:angular:physics:velocity = -0.06018879
                }
            }

            over "R_link6"
            {
                vector3f physics:angularVelocity = (0.0008643633, -3.590723, -0.31810462)
                vector3f physics:velocity = (-0.002689961, -0.0009543259, 0.07857456)
                quatd xformOp:orient = (0.9999738249646403, 0.0011667609315037305, 0.007104784311307657, 0.0007142089368676933)
                double3 xformOp:translate = (0.1364417941361129, -0.37156539729818094, 1.2305359840393066)

                over "R_joint7"
                {
                    float drive:angular:physics:damping = 2.5
                    float drive:angular:physics:maxForce = 100
                    float drive:angular:physics:stiffness = 75
                    float physxJoint:jointFriction = 0
                    float physxJoint:maxJointVelocity = 720
                    float state:angular:physics:position = 0.0026387624
                    float state:angular:physics:velocity = 0.015094327
                }
            }

            over "R_gripper_base"
            {
                vector3f physics:angularVelocity = (0.00084305665, -3.5756288, -0.31806928)
                vector3f physics:velocity = (-0.0007205158, -0.0010142069, 0.07925584)
                quatd xformOp:orient = (0.49667269018771204, -0.49622187625715636, 0.5025871457575914, 0.5044663014164239)
                double3 xformOp:translate = (0.21222653696829674, -0.22445613465293635, 1.2298004627227783)

                over "R_jaw_1_joint"
                {
                    float drive:linear:physics:damping = 10
                    float drive:linear:physics:maxForce = 50
                    float drive:linear:physics:stiffness = 100
                    float drive:linear:physics:targetPosition = 0
                    float state:linear:physics:position = 0.000015442658
                    float state:linear:physics:velocity = -0.00026461369
                }

                over "R_jaw_2_joint"
                {
                    float state:linear:physics:position = 6.0514947e-7
                    float state:linear:physics:velocity = -0.0002758255
                }
            }

            over "world"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0007468335, -0.00007778516, 0.000038012146)
                quatd xformOp:orient = (0.9999985098838806, 0.0011667672079056501, -0.0010618832893669605, 0.0007009196560829878)
                double3 xformOp:translate = (0.08398884534835815, -0.06198471784591675, -0.00016027282981667668)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "base_center"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0007468335, -0.00007778516, 0.000038012146)
                quatd xformOp:orient = (0.999998511038284, 0.0011663044556536753, -0.001061480025465562, 0.0007006534716399926)
                double3 xformOp:translate = (0.0839888722687423, -0.061984713589990026, -0.00016027282981667668)
            }

            over "laser"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0012313159, 0.0005715904, -0.0003427491)
                quatd xformOp:orient = (0.9999985435651717, 0.00116632432476259, -0.0010614352874803495, 0.0006526179857671185)
                double3 xformOp:translate = (-0.36882481267159584, -0.05149963072522867, 0.5938839316368103)

                def Camera "Rotating" (
                    prepend apiSchemas = ["IsaacRtxLidarSensorAPI"]
                )
                {
                    token cameraSensorType = "lidar" (
                        allowedTokens = ["camera", "radar", "lidar"]
                    )
                    string sensorModelConfig = "Example_Rotary"
                    string sensorModelPluginName = "omni.sensors.nv.lidar.lidar_core.plugin"
                    token visibility = "invisible"
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "botwheel_left"
            {
                vector3f physics:angularVelocity = (0.00008653659, -0.8081557, -0.08284471)
                vector3f physics:velocity = (-0.0004654219, -0.00007574366, 0.000033099543)
                quatd xformOp:orient = (-0.0009546286530278341, 0.32811374704093677, -0.0009023845297011894, 0.9446373078536817)
                double3 xformOp:translate = (0.0834436685829818, 0.23137641378656637, 0.08622398972511292)
            }

            over "camera_holder"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.0024392463, 0.00007531985, 0.00032961406)
                quatd xformOp:orient = (0.6200365784709554, 0.3391173732854548, 0.33804493672923175, 0.621514013716291)
                double3 xformOp:translate = (0.050212290981358265, -0.053721527969682104, 1.7819968461990356)
            }

            over "head_cam_link"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.002598106, 0.000150972, 0.0006348952)
                quatd xformOp:orient = (0.6200366546138687, 0.339117354550577, 0.338044888157031, 0.6215139743953958)
                double3 xformOp:translate = (0.0994876892357528, -0.053734000241601354, 1.8107576370239258)
            }

            over "head_cam_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.002386448, 0.00020232088, 0.0008432405)
                quatd xformOp:orient = (0.8779088984156013, 0.0007583439159212993, 0.47882595962960867, 0.0010446922968330016)
                double3 xformOp:translate = (0.1159034640579879, -0.053676884090745336, 1.7940667867660522)
            }

            over "head_cam_imu_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.0023460728, 0.00018683856, 0.0007807922)
                quatd xformOp:orient = (-0.0002024665685900217, -0.2821941717703556, -0.0012748973875482798, 0.959356442133362)
                double3 xformOp:translate = (0.11094972203070519, -0.09164197317346323, 1.8002763986587524)
            }

            over "head_cam_left_camera_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.0025052843, 0.00020219143, 0.00084229466)
                quatd xformOp:orient = (0.8779088984156013, 0.0007583439159212993, 0.47882595962960867, 0.0010446922968330016)
                double3 xformOp:translate = (0.11586191962057946, -0.016177024161660558, 1.7941542863845825)
            }

            over "head_cam_left_camera_optical_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.0025052843, 0.00020219143, 0.00084229466)
                quatd xformOp:orient = (-0.2004429697622879, 0.6785106380262298, -0.6782242376946874, 0.19863990878364104)
                double3 xformOp:translate = (0.11586191962057946, -0.016177024161660558, 1.7941542863845825)
            }

            over "head_cam_model_origin"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.002386448, 0.00020232088, 0.0008432405)
                quatd xformOp:orient = (0.1986374755573973, 0.6782241837863904, 0.6785114185854109, 0.20044292125361396)
                double3 xformOp:translate = (0.1159034640579879, -0.053676884090745336, 1.7940667867660522)
            }

            over "head_cam_rgb_camera_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.002386448, 0.00020232088, 0.0008432405)
                quatd xformOp:orient = (0.8779088984156013, 0.0007583439159212993, 0.47882595962960867, 0.0010446922968330016)
                double3 xformOp:translate = (0.1159034640579879, -0.053676884090745336, 1.7940667867660522)

                def Camera "head_cam"
                {
                    float2 clippingRange = (0.01, 10000000)
                    float focalLength = 10.900001
                    float focusDistance = 400
                    quatd xformOp:orient = (0.5000000000000001, 0.5, -0.5, -0.49999999999999994)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "head_cam_rgb_camera_optical_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.002386448, 0.00020232088, 0.0008432405)
                quatd xformOp:orient = (-0.2004429697622879, 0.6785106380262298, -0.6782242376946874, 0.19863990878364104)
                double3 xformOp:translate = (0.1159034640579879, -0.053676884090745336, 1.7940667867660522)
            }

            over "head_cam_right_camera_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.0022676117, 0.00020245032, 0.00084418623)
                quatd xformOp:orient = (0.8779088984156013, 0.0007583439159212993, 0.47882595962960867, 0.0010446922968330016)
                double3 xformOp:translate = (0.11594500849539635, -0.09117674401983011, 1.793979287147522)
            }

            over "head_cam_right_camera_optical_frame"
            {
                vector3f physics:angularVelocity = (-0.0006394687, -0.72718716, 0.17987253)
                vector3f physics:velocity = (-0.0022676117, 0.00020245032, 0.00084418623)
                quatd xformOp:orient = (-0.2004429697622879, 0.6785106380262298, -0.6782242376946874, 0.19863990878364104)
                double3 xformOp:translate = (0.11594500849539635, -0.09117674401983011, 1.793979287147522)
            }

            over "pillar_platform"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019099545, -0.00017011332, 0.0670175)
                quatd xformOp:orient = (0.706644287730537, 0.00007422565249255836, -0.0015752705511570266, 0.7075672149209891)
                double3 xformOp:translate = (-0.3103314368933976, -0.2746181445477842, -0.1807084083557129)
            }

            over "chest_cam_link"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.001936725, -0.00029786534, 0.06709366)
                quatd xformOp:orient = (0.6528258605231874, 0.27048963388532027, 0.26931887944917077, 0.6543096323339496)
                double3 xformOp:translate = (0.14199557612234948, -0.05239052644952524, 1.2625079154968262)
            }

            over "chest_cam_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019202051, -0.00031637566, 0.06710449)
                quatd xformOp:orient = (-0.0008278796752303689, 0.9242843718890341, 0.0010492011580119306, -0.3817022578841621)
                double3 xformOp:translate = (0.15487602064902184, -0.052328105485284215, 1.2429590225219727)
            }

            over "chest_cam_imu_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.001871833, -0.0003089812, 0.0670996)
                quatd xformOp:orient = (0.9234720111579356, 0.0013273368635068061, -0.3836634700983651, 0.00015651469363646856)
                double3 xformOp:translate = (0.14971497366721032, -0.014404396927201635, 1.2492520809173584)
            }

            over "chest_cam_left_camera_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019731936, -0.00031644633, 0.06710508)
                quatd xformOp:orient = (-0.0008278796752303689, 0.9242843718890341, 0.0010492011580119306, -0.3817022578841621)
                double3 xformOp:translate = (0.15492507527167199, -0.08982798031553019, 1.242871642112732)
            }

            over "chest_cam_left_camera_optical_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019731936, -0.00031644633, 0.06710508)
                quatd xformOp:orient = (0.27035251651567804, 0.6528826599564389, 0.6531039720107484, 0.2722295922298469)
                double3 xformOp:translate = (0.15492507527167199, -0.08982798031553019, 1.242871642112732)
            }

            over "chest_cam_model_origin"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019202051, -0.00031637566, 0.06710449)
                quatd xformOp:orient = (-0.2722295991348783, 0.6531030061923908, -0.6528826478165307, 0.27035487204302705)
                double3 xformOp:translate = (0.15487602064902184, -0.052328105485284215, 1.2429590225219727)
            }

            over "chest_cam_rgb_camera_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019202051, -0.00031637566, 0.06710449)
                quatd xformOp:orient = (-0.0008278796752303689, 0.9242843718890341, 0.0010492011580119306, -0.3817022578841621)
                double3 xformOp:translate = (0.15487602064902184, -0.052328105485284215, 1.2429590225219727)

                def Camera "chest_cam"
                {
                    float2 clippingRange = (0.01, 10000000)
                    float focalLength = 8.1
                    float focusDistance = 400
                    quatd xformOp:orient = (0.5000000000000001, 0.5, -0.5, -0.49999999999999994)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "chest_cam_rgb_camera_optical_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0019202051, -0.00031637566, 0.06710449)
                quatd xformOp:orient = (0.27035251651567804, 0.6528826599564389, 0.6531039720107484, 0.2722295922298469)
                double3 xformOp:translate = (0.15487602064902184, -0.052328105485284215, 1.2429590225219727)
            }

            over "chest_cam_right_camera_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0018672167, -0.00031630497, 0.06710391)
                quatd xformOp:orient = (-0.0008278796752303689, 0.9242843718890341, 0.0010492011580119306, -0.3817022578841621)
                double3 xformOp:translate = (0.1548269660263717, -0.014828230655038244, 1.2430464029312134)
            }

            over "chest_cam_right_camera_optical_frame"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0018672167, -0.00031630497, 0.06710391)
                quatd xformOp:orient = (0.27035251651567804, 0.6528826599564389, 0.6531039720107484, 0.2722295922298469)
                double3 xformOp:translate = (0.1548269660263717, -0.014828230655038244, 1.2430464029312134)
            }

            over "left_arm_mount"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0017682916, -0.00010570389, 0.066977784)
                quatd xformOp:orient = (0.7079304961942057, -0.706281006346785, -0.0012120372848766691, -0.00028913252754569733)
                double3 xformOp:translate = (0.0058899791031539195, 0.049250159943258875, 1.2332254648208618)
            }

            over "L_link6"
            {
                vector3f physics:angularVelocity = (-0.59760237, -0.68491656, 0.54442066)
                vector3f physics:velocity = (-0.0014271928, 0.0025401143, 0.0744168)
                quatd xformOp:orient = (0.7056218430625312, 0.7085884810841494, -0.0004010809353384144, -0.0001349147060211261)
                double3 xformOp:translate = (0.3337222010880172, 0.08908683487192404, 1.5357288122177124)
            }

            over "L_link_eef"
            {
                vector3f physics:angularVelocity = (-0.59760237, -0.68491656, 0.54442066)
                vector3f physics:velocity = (-0.0014029704, 0.002610142, 0.07453149)
                quatd xformOp:orient = (0.7056218430625312, 0.7085884810841493, -0.00040108090623458396, -0.00013491479333261743)
                double3 xformOp:translate = (0.33372232029730675, 0.08908683487192404, 1.5357288122177124)
            }

            over "L_gripper_jaw_1"
            {
                vector3f physics:angularVelocity = (-0.59760237, -0.68491656, 0.54442066)
                vector3f physics:velocity = (-0.00092550594, 0.002608234, 0.0749351)
                quatd xformOp:orient = (-0.4990693901962834, -0.5007882113223479, 0.5013072485685336, -0.4988305861736226)
                double3 xformOp:translate = (0.3336844117432296, 0.03908724018350851, 1.5355331897735596)
            }

            over "L_gripper_jaw_2"
            {
                vector3f physics:angularVelocity = (-0.59760237, -0.68491656, 0.54442066)
                vector3f physics:velocity = (-0.00092506467, 0.0026070338, 0.07511833)
                quatd xformOp:orient = (0.49882995465056096, 0.5013066041977332, 0.5007888782420818, -0.49906999945908787)
                double3 xformOp:translate = (0.3336844117432296, 0.039087418997442835, 1.5354918241500854)
            }

            over "right_arm_mount"
            {
                vector3f physics:angularVelocity = (-0.0008342569, -0.048159473, -0.08107284)
                vector3f physics:velocity = (-0.0020558417, -0.00010608738, 0.06698097)
                quatd xformOp:orient = (0.7062810569735584, 0.7079304457998921, -0.0002890488249775688, 0.001211990369704354)
                double3 xformOp:translate = (0.006156113842076039, -0.1542491274236082, 1.2327508926391602)
            }

            over "R_link7"
            {
                vector3f physics:angularVelocity = (0.00084305665, -3.5756288, -0.31806928)
                vector3f physics:velocity = (-0.0014726667, -0.0010153179, 0.07926633)
                quatd xformOp:orient = (0.7079118825376077, -0.7062644361390049, 0.004534963052039459, 0.005544990300300298)
                double3 xformOp:translate = (0.2122971088677108, -0.2744559454081892, 1.229683518409729)
            }

            over "R_link_eef"
            {
                vector3f physics:angularVelocity = (0.00084305665, -3.5756288, -0.31806928)
                vector3f physics:velocity = (-0.0009907845, -0.0010145969, 0.07925951)
                quatd xformOp:orient = (0.7079119420777781, -0.706264376466598, 0.004534962585943066, 0.005544989834106998)
                double3 xformOp:translate = (0.2122971088677108, -0.2744559528587698, 1.229683518409729)
            }

            over "R_gripper_jaw_1"
            {
                vector3f physics:angularVelocity = (0.00084305665, -3.5756288, -0.31806928)
                vector3f physics:velocity = (-0.0007158015, -0.0010148193, 0.07952041)
                quatd xformOp:orient = (0.49667267895296224, -0.49622188000656836, 0.5025872091597449, 0.5044662456234842)
                double3 xformOp:translate = (0.21222629854971764, -0.2244560992626785, 1.2297849655151367)
            }

            over "R_gripper_jaw_2"
            {
                vector3f physics:angularVelocity = (0.00084305665, -3.5756288, -0.31806928)
                vector3f physics:velocity = (-0.000724458, -0.0010135671, 0.07898004)
                quatd xformOp:orient = (0.5044657559992368, -0.5025865068161138, -0.4962225186039721, -0.49667324894826537)
                double3 xformOp:translate = (0.21222653696829674, -0.2244561365155815, 1.229801058769226)
            }

            over "botwheel_right"
            {
                vector3f physics:angularVelocity = (0.0045318906, -3.870896, -0.08998389)
                vector3f physics:velocity = (-0.0012613365, -0.00007870173, 0.00012009485)
                quatd xformOp:orient = (0.9999767724540821, 0.0011702097737529011, -0.006678563353031993, 0.0006942283067002514)
                double3 xformOp:translate = (0.08417871306235192, -0.3308216812370657, 0.08491349965333939)
            }

            def "Graph"
            {
                def OmniGraph "ROS_JointStates"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 9)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "OnPlaybackTick" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        token node:type = "omni.graph.action.OnPlaybackTick"
                        int node:typeVersion = 2
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                    }

                    def OmniGraphNode "Context" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uchar inputs:domain_id
                        custom bool inputs:useDomainIDEnvVar
                        token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                        int node:typeVersion = 2
                        custom uint64 outputs:context
                    }

                    def OmniGraphNode "ReadSimTime" (
                        delete apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom bool inputs:resetOnStop = 0
                        custom int64 inputs:swhFrameNumber
                        token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
                        int node:typeVersion = 1
                        custom double outputs:simulationTime
                    }

                    def OmniGraphNode "PublisherJointState" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/Context.outputs:context>
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom string inputs:nodeNamespace = ""
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom rel inputs:targetPrim = </World/alfred_parent_prim/alfred_base_descr/L_link_base> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom double inputs:timeStamp
                        prepend double inputs:timeStamp.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/ReadSimTime.outputs:simulationTime>
                        custom string inputs:topicName = "/joint_states_real"
                        token node:type = "omni.isaac.ros2_bridge.ROS2PublishJointState"
                        int node:typeVersion = 1
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "SubscriberJointState" (
                        delete apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/Context.outputs:context>
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/OnPlaybackTick.outputs:tick>
                        custom string inputs:nodeNamespace
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom string inputs:topicName = "/joint_states"
                        token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeJointState"
                        int node:typeVersion = 2
                        custom double[] outputs:effortCommand
                        custom uint outputs:execOut (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom token[] outputs:jointNames
                        custom double[] outputs:positionCommand
                        custom double outputs:timeStamp
                        custom double[] outputs:velocityCommand
                    }

                    def OmniGraphNode "ArticulationController" (
                        delete apiSchemas = ["NodeGraphNodeAPI"]
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom double[] inputs:effortCommand
                        prepend double[] inputs:effortCommand.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/remove_array_index_03.outputs:array>
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/SubscriberJointState.outputs:execOut>
                        custom int[] inputs:jointIndices
                        custom token[] inputs:jointNames = []
                        prepend token[] inputs:jointNames.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/remove_array_index_04.outputs:array>
                        custom double[] inputs:positionCommand
                        prepend double[] inputs:positionCommand.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/remove_array_index_05.outputs:array>
                        custom string inputs:robotPath
                        custom rel inputs:targetPrim = </World/alfred_parent_prim/alfred_base_descr> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom double[] inputs:velocityCommand
                        token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
                        int node:typeVersion = 1
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "remove_array_index" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:array
                        prepend token inputs:array.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/SubscriberJointState.outputs:jointNames>
                        custom int inputs:index = 3
                        token node:type = "omni.graph.nodes.ArrayRemoveIndex"
                        int node:typeVersion = 1
                        custom token outputs:array
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "remove_array_index_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:array
                        prepend token inputs:array.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/SubscriberJointState.outputs:effortCommand>
                        custom int inputs:index = 3
                        token node:type = "omni.graph.nodes.ArrayRemoveIndex"
                        int node:typeVersion = 1
                        custom token outputs:array
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "remove_array_index_02" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:array
                        prepend token inputs:array.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/SubscriberJointState.outputs:positionCommand>
                        custom int inputs:index = 3
                        token node:type = "omni.graph.nodes.ArrayRemoveIndex"
                        int node:typeVersion = 1
                        custom token outputs:array
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "remove_array_index_03" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:array
                        prepend token inputs:array.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/remove_array_index_01.outputs:array>
                        custom int inputs:index = 3
                        token node:type = "omni.graph.nodes.ArrayRemoveIndex"
                        int node:typeVersion = 1
                        custom token outputs:array
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "remove_array_index_04" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:array
                        prepend token inputs:array.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/remove_array_index.outputs:array>
                        custom int inputs:index = 3
                        token node:type = "omni.graph.nodes.ArrayRemoveIndex"
                        int node:typeVersion = 1
                        custom token outputs:array
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "remove_array_index_05" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:array
                        prepend token inputs:array.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_JointStates/remove_array_index_02.outputs:array>
                        custom int inputs:index = 3
                        token node:type = "omni.graph.nodes.ArrayRemoveIndex"
                        int node:typeVersion = 1
                        custom token outputs:array
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }
                }

                def OmniGraph "ROS_Move_to_TF"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 9)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "make_transformation_matrix_from_trs" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom token inputs:rotationOrder (
                            allowedTokens = ["XYZ", "XZY", "YXZ", "YZX", "ZXY", "ZYX"]
                        )
                        custom vector3d inputs:rotationXYZ = (0, 0, -13)
                        prepend vector3d inputs:rotationXYZ.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Move_to_TF/ros2_subscribe_twist_01.outputs:angularVelocity>
                        custom vector3d inputs:scale
                        custom vector3d inputs:translation = (0, 0, 0)
                        prepend vector3d inputs:translation.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Move_to_TF/ros2_subscribe_twist_01.outputs:linearVelocity>
                        token node:type = "omni.graph.nodes.MakeTransform"
                        int node:typeVersion = 2
                        custom matrix4d outputs:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token ui:nodegraph:node:expansionState = "open"
                        uniform float2 ui:nodegraph:node:pos = (501.89, 90.49912)
                    }

                    def OmniGraphNode "move_to_transform" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Move_to_TF/on_playback_tick.outputs:tick>
                        custom float inputs:exponent = 1
                        custom rel inputs:prim = </World/alfred_parent_prim> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom string inputs:primPath = ""
                        custom double inputs:speed = 3
                        custom uint inputs:stop (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom matrix4d inputs:target
                        prepend matrix4d inputs:target.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Move_to_TF/make_transformation_matrix_from_trs.outputs:transform>
                        custom bool inputs:usePath
                        token node:type = "omni.graph.nodes.MoveToTransform"
                        int node:typeVersion = 2
                        custom uint outputs:finished (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        uniform token ui:nodegraph:node:expansionState = "open"
                        uniform float2 ui:nodegraph:node:pos = (977.33386, -16.046429)
                    }

                    def OmniGraphNode "on_playback_tick" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        token node:type = "omni.graph.action.OnPlaybackTick"
                        int node:typeVersion = 2
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                        uniform token ui:nodegraph:node:expansionState = "open"
                        uniform float2 ui:nodegraph:node:pos = (-199.41003, -147.64078)
                    }

                    def OmniGraphNode "ros2_context" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uchar inputs:domain_id
                        custom bool inputs:useDomainIDEnvVar
                        token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                        int node:typeVersion = 2
                        custom uint64 outputs:context
                        uniform token ui:nodegraph:node:expansionState = "open"
                        uniform float2 ui:nodegraph:node:pos = (-170.46689, 75.002144)
                    }

                    def OmniGraphNode "ros2_subscribe_twist_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Move_to_TF/ros2_context.outputs:context>
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Move_to_TF/on_playback_tick.outputs:tick>
                        custom string inputs:nodeNamespace
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom string inputs:topicName = "alfred_base_link_tf_twist"
                        token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeTwist"
                        int node:typeVersion = 1
                        custom vector3d outputs:angularVelocity
                        custom uint outputs:execOut (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom vector3d outputs:linearVelocity
                        uniform token ui:nodegraph:node:expansionState = "open"
                        uniform float2 ui:nodegraph:node:pos = (250.88971, 16.647163)
                    }
                }

                def OmniGraph "ROS_Cameras"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 9)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "CameraInfoPublish"
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        custom string inputs:frameId = "head_cam_rgb_camera_optical_frame"
                        custom string inputs:frameIdRight
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/head_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        custom token inputs:renderProductPathRight
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:topicName = "camera_info"
                        custom string inputs:topicNameRight
                        custom bool inputs:useSystemTime = 1
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraInfoHelper"
                        int node:typeVersion = 1
                    }

                    def OmniGraphNode "RenderProduct" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom rel inputs:cameraPrim = </World/alfred_parent_prim/alfred_base_descr/head_cam_rgb_camera_frame/head_cam> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:enabled
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RunOnce.outputs:step>
                        custom uint inputs:height
                        custom uint inputs:width
                        token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
                        int node:typeVersion = 2
                        custom uint outputs:execOut (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom token outputs:renderProductPath
                    }

                    def OmniGraphNode "RunOnce" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/on_tick.outputs:tick>
                        token node:type = "omni.isaac.core_nodes.OgnIsaacRunOneSimulationFrame"
                        int node:typeVersion = 1
                        custom uint outputs:step (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        uniform float2 ui:nodegraph:node:pos = (-1003.1448, 1.4014475)
                    }

                    def OmniGraphNode "Context"
                    {
                        custom uchar inputs:domain_id
                        custom bool inputs:useDomainIDEnvVar
                        token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                        int node:typeVersion = 2
                        custom uint64 outputs:context
                    }

                    def OmniGraphNode "RGBPublish"
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom bool inputs:enableSemanticLabels
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        custom string inputs:frameId = "head_cam_rgb_camera_optical_frame"
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/head_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:semanticLabelsTopicName
                        custom float2 inputs:stereoOffset
                        custom string inputs:topicName = "/rgb"
                        custom token inputs:type = "rgb" (
                            allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                        )
                        custom bool inputs:useSystemTime = 1
                        custom token inputs:viewport
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                        int node:typeVersion = 2
                    }

                    def OmniGraphNode "DepthPublish"
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom bool inputs:enableSemanticLabels
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        custom string inputs:frameId = "head_cam_rgb_camera_optical_frame"
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/head_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:semanticLabelsTopicName
                        custom float2 inputs:stereoOffset
                        custom string inputs:topicName = "/depth"
                        custom token inputs:type = "depth" (
                            allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                        )
                        custom bool inputs:useSystemTime = 1
                        custom token inputs:viewport
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                        int node:typeVersion = 2
                    }

                    def OmniGraphNode "DepthPclPublish"
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled = 1
                        custom bool inputs:enableSemanticLabels
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        custom string inputs:frameId = "head_cam_rgb_camera_optical_frame"
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/head_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:semanticLabelsTopicName
                        custom float2 inputs:stereoOffset
                        custom string inputs:topicName = "/depth_pcl"
                        custom token inputs:type = "depth_pcl" (
                            allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                        )
                        custom bool inputs:useSystemTime = 1
                        custom token inputs:viewport
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                        int node:typeVersion = 2
                    }

                    def OmniGraphNode "DepthPublish_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom bool inputs:enableSemanticLabels
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        delete uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:execOut>
                        custom string inputs:frameId = "chest_cam_rgb_camera_optical_frame"
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/chest_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        delete token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:semanticLabelsTopicName
                        custom float2 inputs:stereoOffset
                        custom string inputs:topicName = "/depth"
                        custom token inputs:type = "depth" (
                            allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                        )
                        custom bool inputs:useSystemTime = 1
                        custom token inputs:viewport
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                        int node:typeVersion = 2
                    }

                    def OmniGraphNode "DepthPclPublish_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled = 1
                        custom bool inputs:enableSemanticLabels
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        delete uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:execOut>
                        custom string inputs:frameId = "chest_cam_rgb_camera_optical_frame"
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/chest_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        delete token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:semanticLabelsTopicName
                        custom float2 inputs:stereoOffset
                        custom string inputs:topicName = "/depth_pcl"
                        custom token inputs:type = "depth_pcl" (
                            allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                        )
                        custom bool inputs:useSystemTime = 1
                        custom token inputs:viewport
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                        int node:typeVersion = 2
                    }

                    def OmniGraphNode "CameraInfoPublish_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        delete uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:execOut>
                        custom string inputs:frameId = "chest_cam_rgb_camera_optical_frame"
                        custom string inputs:frameIdRight
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/chest_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        delete token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:renderProductPath>
                        custom token inputs:renderProductPathRight
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:topicName = "camera_info"
                        custom string inputs:topicNameRight
                        custom bool inputs:useSystemTime = 1
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraInfoHelper"
                        int node:typeVersion = 1
                    }

                    def OmniGraphNode "RenderProduct_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom rel inputs:cameraPrim = </World/alfred_parent_prim/alfred_base_descr/chest_cam_rgb_camera_frame/chest_cam> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:enabled
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RunOnce.outputs:step>
                        custom uint inputs:height
                        custom uint inputs:width
                        token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
                        int node:typeVersion = 2
                        custom uint outputs:execOut (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom token outputs:renderProductPath
                    }

                    def OmniGraphNode "RGBPublish_01" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom bool inputs:enableSemanticLabels
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        delete uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:execOut>
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:execOut>
                        custom string inputs:frameId = "chest_cam_rgb_camera_optical_frame"
                        custom uint inputs:frameSkipCount
                        custom string inputs:nodeNamespace = "/chest_cam"
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize
                        custom token inputs:renderProductPath
                        delete token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct.outputs:renderProductPath>
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_01.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop = 1
                        custom string inputs:semanticLabelsTopicName
                        custom float2 inputs:stereoOffset
                        custom string inputs:topicName = "/rgb"
                        custom token inputs:type = "rgb" (
                            allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                        )
                        custom bool inputs:useSystemTime = 1
                        custom token inputs:viewport
                        token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                        int node:typeVersion = 2
                    }

                    def OmniGraphNode "on_tick" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint inputs:framePeriod = 5
                        custom bool inputs:onlyPlayback
                        token node:type = "omni.graph.action.OnTick"
                        int node:typeVersion = 2
                        custom double outputs:absoluteSimTime
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom bool outputs:isPlaying
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                        custom double outputs:timeSinceStart
                        custom double state:accumulatedSeconds
                        custom uint state:frameCount
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }

                    def OmniGraphNode "RenderProduct_02" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom rel inputs:cameraPrim = </World/alfred_parent_prim/alfred_base_descr/laser/Rotating> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:enabled
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RunOnce.outputs:step>
                        custom uint inputs:height
                        custom uint inputs:width
                        token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
                        int node:typeVersion = 2
                        custom uint outputs:execOut (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom token outputs:renderProductPath
                    }

                    def OmniGraphNode "ros2_rtx_lidar_helper" (
                        prepend apiSchemas = ["NodeGraphNodeAPI"]
                    )
                    {
                        custom uint64 inputs:context
                        prepend uint64 inputs:context.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/Context.outputs:context>
                        custom bool inputs:enabled
                        custom uint inputs:execIn (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        prepend uint inputs:execIn.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_02.outputs:execOut>
                        custom string inputs:frameId = "laser"
                        custom uint inputs:frameSkipCount = 0
                        custom bool inputs:fullScan
                        custom string inputs:nodeNamespace
                        custom string inputs:qosProfile
                        custom uint64 inputs:queueSize = 0
                        custom token inputs:renderProductPath
                        prepend token inputs:renderProductPath.connect = </World/alfred_parent_prim/alfred_base_descr/Graph/ROS_Cameras/RenderProduct_02.outputs:renderProductPath>
                        custom bool inputs:resetSimulationTimeOnStop
                        custom bool inputs:showDebugView
                        custom string inputs:topicName
                        custom token inputs:type (
                            allowedTokens = ["laser_scan", "point_cloud"]
                        )
                        custom bool inputs:useSystemTime = 1
                        token node:type = "omni.isaac.ros2_bridge.ROS2RtxLidarHelper"
                        int node:typeVersion = 1
                        uniform token ui:nodegraph:node:expansionState = "open"
                    }
                }
            }
        }
    }

    def Xform "manip_objects"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4974616716106983, 0.3227360789926272, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "red_block" (
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/Blocks/red_block.usd@
        )
        {
            double3 xformOp:rotateZYX = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.3029693511435378, -0.4588172137737274, 0.8269681762044861)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            over "Cube"
            {
            }
        }

        def "rubiks_cube" (
            delete apiSchemas = ["PhysicsMassAPI", "OmniScriptingAPI"]
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/Rubiks_Cube/rubiks_cube.usd@
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.3
            bool physics:rigidBodyEnabled = 1
            double xformOp:rotateX:unitsResolve = 90
            double3 xformOp:rotateZYX = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.4038777095062174, -0.2858770027452038, 0.8354459542893492)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale", "xformOp:rotateX:unitsResolve"]

            over "RubikCube" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }

        def "thor_table" (
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/Mounts/thor_table.usd@
        )
        {
            quatf xformOp:orient = (6.123234e-17, 0, 0, 1)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.9763623529115932, -0.11960505694150925, 0.8)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Thor_table"
            {
                over "Top"
                {
                    over "_07332_11_Top_Skin_750_x_900_x_6mm"
                    {
                        float3 xformOp:rotateXYZ = (90, 4.961563e-15, 180)
                        float3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0.27499999999998925, -0.0006650000000008593, -0.018999999999999684)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }
                }
            }
        }

        def "small_KLT" (
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/KLT_Bin/small_KLT.usd@
        )
        {
            float3 xformOp:rotateZYX = (0, 0, 90)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.4942363017177291, 0.058452070608833645, 0.8675083243429065)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        def "_25_mug" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/YCB/Axis_Aligned/025_mug.usd@
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.2
            bool physics:rigidBodyEnabled = 1
            quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.3303791126260425, -0.13352410495280462, 0.8415723102782374)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "_25_mug" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }

        def "_11_banana" (
            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/YCB/Axis_Aligned/011_banana.usd@
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.12
            bool physics:rigidBodyEnabled = 1
            quatf xformOp:orient = (0.70710677, 0.70710677, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.5577827282125678, -0.2915301024913482, 0.8181193557868305)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "_11_banana" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }

        def "_35_power_drill" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/YCB/Axis_Aligned/035_power_drill.usd@
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 1
            bool physics:rigidBodyEnabled = 1
            quatf xformOp:orient = (6.123234e-17, -2.592372e-17, 0.70710677, -0.70710677)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.6076540094275409, -0.3866304077906066, 0.8830477065638649)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "_35_power_drill" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }

        def "_40_large_marker" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Props/YCB/Axis_Aligned/040_large_marker.usd@
        )
        {
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.05
            bool physics:rigidBodyEnabled = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.4389212755243463, -0.411448747692771, 0.7998812835123813)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "_40_large_marker" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }
    }
}

def PhysicsScene "physicsScene"
{
}

def "Office" (
    customData = {
        dictionary omni = {
            dictionary kit = {
                bool locked = 1
            }
        }
    }
    prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Environments/Office/office.usd@
)
{
    rel proxyPrim (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )
    uniform token purpose (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )
    token visibility (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )
    quatf xformOp:orient = (1, 0, 0, 0) (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )
    float3 xformOp:scale = (1, 1, 1) (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )
    double3 xformOp:translate = (0, 0, 0) (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"] (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
    )

    over "SM_Wall_corner_outside6" (
        instanceable = false
    )
    {
    }

    over "Cube18" (
        instanceable = false
    )
    {
        quatd xformOp:orient = (6.123233995736766e-17, 0.7071067336835164, 4.329779990305291e-17, -0.7071068286895754)
        double3 xformOp:scale = (-0.017232999205589294, -57.95885467529297, -21.048757553100586)
        double3 xformOp:translate = (-4.45, -4.89, 3.3000000000000003)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    over "ExtraLights"
    {
        over "LightSource_0" (
            active = true
        )
        {
        }
    }

    over "DomeLight" (
        active = true
    )
    {
    }

    over "BP_CeilingLightC_Light9"
    {
        over "SpotLight" (
            active = true
        )
        {
            float colorTemperature = 6500
            float inputs:exposure = 0
            float inputs:intensity = 458314.97
            float inputs:radius = 15
            float intensity = 458314.97
            float radius = 15
            bool visibleInPrimaryRay = 0
            quatd xformOp:orient = (0.7071065306663514, 6.322027276634099e-8, -6.322027276634096e-8, -0.7071070317066492)
            double3 xformOp:scale = (0.009999998807907105, 0.01, 0.009999998807907105)
            double3 xformOp:translate = (-0.24999984741210937, 0.25, -0.013155822753906251)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    over "BP_DoorA_827"
    {
        quatd xformOp:orient = (0.7071067094802858, 0, 0, 0.7071068528928021)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-7.6000000000000005, 56.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "SM_DoorA_Door"
        {
            over "InstancedSM_DoorA_Door"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    over "Camera"
    {
        double3 xformOp:rotateXYZ = (74.34431418391418, 0.000015489809669588794, 52.96870342568562)
        double3 xformOp:scale = (1.000000238418579, 0.9999998807907104, 0.9999995827674866)
        double3 xformOp:translate = (5.06542, -3.86535, 2.84993)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    over "Camera_2"
    {
        custom vector3d omni:kit:centerOfInterest = (0, 0, -4.544872510010555)
        quatd xformOp:orient = (0.3570846170046397, 0.31057993814561713, 0.5781197697817433, 0.6646865502683341)
        double3 xformOp:scale = (1.0000003576278687, 0.9999998807907104, 0.999999463558197)
        double3 xformOp:translate = (2.8638285726021224, 1.6306377947573711, 1.4834714745395423)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "OmniverseKit_Persp"
{
    float focalLength = 15
    float fStop = 0
}

over "OmniverseKit_Front"
{
    float3 xformOp:rotateXYZ
}

over "Render" (
    hide_in_stage_window = true
)
{
    over "OmniverseKit"
    {
        over "HydraTextures"
        {
            over "Replicator_20"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_19"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_01"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_03"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_02"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_04"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_07"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_06"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_05"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_10"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_09"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_08"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_12"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_11"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_13"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_16"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_15"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_14"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_21"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_18"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_17"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }
        }
    }

    over "PostProcess"
    {
        over "SDGPipeline"
        {
        }
    }
}

